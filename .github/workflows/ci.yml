name: CI Pipeline

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

permissions:
  contents: read
  pull-requests: write
  issues: write

env:
  NODE_VERSION: '22'
  TF_VERSION: '1.12.2'
  AWS_REGION: 'us-east-1'

jobs:
  # Test and Lint all applications
  test:
    name: Test & Lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: [video, worker, auth]
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Generate Prisma Client - ${{ matrix.app }}
      run: |
        # Check if the app has a prisma:generate script in package.json
        if grep -q '"prisma:generate"' apps/${{ matrix.app }}/package.json 2>/dev/null; then
          echo "Running Prisma generate for ${{ matrix.app }}"
          npm run prisma:generate --workspace=apps/${{ matrix.app }}
        else
          echo "Skipping Prisma generate for ${{ matrix.app }} (no Prisma setup found)"
        fi

    - name: Type check - ${{ matrix.app }}
      run: npm run typecheck --workspace=apps/${{ matrix.app }}

    - name: Lint - ${{ matrix.app }}
      run: npm run lint:check --workspace=apps/${{ matrix.app }}

    - name: Format check - ${{ matrix.app }}
      run: npm run format:check --workspace=apps/${{ matrix.app }}

    # - name: Test - ${{ matrix.app }}
    #   run: npm run test --workspace=apps/${{ matrix.app }}

  # Terraform Plan (on PR)
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    defaults:
      run:
        working-directory: ./infra/terraform

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Terraform Format Check
      id: fmt
      run: terraform fmt -check -recursive
      continue-on-error: true

    - name: Terraform Init
      id: init
      run: |
        # Initialize with backend configuration
        # Backend details are set via environment variables
        terraform init \
          -backend-config="bucket=${TF_STATE_BUCKET}" \
          -backend-config="key=${GITHUB_REF_NAME}/terraform.tfstate" \
          -backend-config="region=${AWS_REGION}" \
          -backend-config="dynamodb_table=${TF_LOCK_TABLE}" \
          -backend-config="encrypt=true"
      env:
        TF_STATE_BUCKET: ${{ secrets.TF_STATE_BUCKET }}
        TF_LOCK_TABLE: ${{ secrets.TF_LOCK_TABLE }}

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    - name: Terraform Plan
      id: plan
      run: |
        # Set stage based on branch name (trunk-based development)
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          BRANCH_NAME="${{ github.head_ref }}"
        else
          BRANCH_NAME="${{ github.ref_name }}"
        fi
        
        if [[ "$BRANCH_NAME" == "main" ]]; then
          STAGE="prod"
        else
          # Clean branch name for ECR repository naming
          STAGE=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9-]/-/g' | tr '[:upper:]' '[:lower:]')
        fi
        
        # Get AWS account ID for ECR repository URLs
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        terraform plan -no-color -input=false \
          -var="jwt_access_secret=${{ secrets.JWT_ACCESS_SECRET }}" \
          -var="jwt_refresh_secret=${{ secrets.JWT_REFRESH_SECRET }}" \
          -var="video_api_image=$ACCOUNT_ID.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/fiap-hackaton-$STAGE/video:latest" \
          -var="worker_image=$ACCOUNT_ID.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/fiap-hackaton-$STAGE/worker:latest"
      continue-on-error: true

    - name: Update Pull Request
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      continue-on-error: true
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          try {
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });
          } catch (error) {
            console.log('Error posting comment:', error.message);
            core.warning('Unable to post PR comment due to permissions. Plan results are available in the workflow logs.');
          }

    - name: Create Workflow Summary
      if: github.event_name == 'pull_request'
      run: |
        echo "### Terraform Plan Results üìã" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Format Check:** ${{ steps.fmt.outcome }}" >> $GITHUB_STEP_SUMMARY
        echo "**Initialization:** ${{ steps.init.outcome }}" >> $GITHUB_STEP_SUMMARY
        echo "**Validation:** ${{ steps.validate.outcome }}" >> $GITHUB_STEP_SUMMARY
        echo "**Plan:** ${{ steps.plan.outcome }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "üìù Full plan details are available in the workflow logs above." >> $GITHUB_STEP_SUMMARY

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1
