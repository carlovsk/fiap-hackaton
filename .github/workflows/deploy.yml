name: Deploy Infrastructure

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types:
      - completed
    branches: [main]  # Only run for main branch CI completions
  # Remove direct push trigger to avoid duplicate runs
  # Deploy only runs after CI passes via workflow_run

permissions:
  contents: read
  actions: read

env:
  PROJECT_NAME: 'fiap-hackaton'
  TF_VERSION: '1.12.2'
  AWS_REGION: 'us-east-1'

jobs:
  # Build and push Docker images
  build-and-push:
    name: Build & Push Images
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    env:
      STAGE: prod  # Always prod for main branch deploys
    outputs:
      video-image: ${{ steps.build-video.outputs.image }}
      worker-image: ${{ steps.build-worker.outputs.image }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to ECR
      run: |
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        aws ecr get-login-password \
          --region ${{ env.AWS_REGION }} \
        | docker login \
          --username AWS \
          --password-stdin $ACCOUNT_ID.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

    - name: Create ECR repositories if missing
      run: |
        # Video API repository
        VIDEO_REPO="${{ env.PROJECT_NAME }}-${{ env.STAGE }}/video"
        if ! aws ecr describe-repositories --repository-names "$VIDEO_REPO" \
             --region ${{ env.AWS_REGION }} > /dev/null 2>&1; then
          aws ecr create-repository \
            --repository-name "$VIDEO_REPO" \
            --region ${{ env.AWS_REGION }}
        fi
        
        # Worker repository
        WORKER_REPO="${{ env.PROJECT_NAME }}-${{ env.STAGE }}/worker"
        if ! aws ecr describe-repositories --repository-names "$WORKER_REPO" \
             --region ${{ env.AWS_REGION }} > /dev/null 2>&1; then
          aws ecr create-repository \
            --repository-name "$WORKER_REPO" \
            --region ${{ env.AWS_REGION }}
        fi

    - name: Build & Push Video API image
      id: build-video
      run: |
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        REPO="${{ env.PROJECT_NAME }}-${{ env.STAGE }}/video"
        URI="$ACCOUNT_ID.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$REPO:${{ github.sha }}"
        LATEST_URI="$ACCOUNT_ID.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$REPO:latest"
        
        docker build \
          -t "$URI" \
          -t "$LATEST_URI" \
          -f apps/video/Dockerfile \
          apps/video
        docker push "$URI"
        docker push "$LATEST_URI"
        
        echo "image=$URI" >> $GITHUB_OUTPUT

    - name: Build & Push Worker image
      id: build-worker
      run: |
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        REPO="${{ env.PROJECT_NAME }}-${{ env.STAGE }}/worker"
        URI="$ACCOUNT_ID.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$REPO:${{ github.sha }}"
        LATEST_URI="$ACCOUNT_ID.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$REPO:latest"
        
        docker build \
          -t "$URI" \
          -t "$LATEST_URI" \
          -f apps/worker/Dockerfile \
          apps/worker
        docker push "$URI"
        docker push "$LATEST_URI"
        
        echo "image=$URI" >> $GITHUB_OUTPUT

  # Deploy infrastructure with Terraform
  terraform-deploy:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    environment: prod  # Always prod since we only deploy main branch
    defaults:
      run:
        working-directory: ./infra/terraform
    outputs:
      video-api-url: ${{ steps.terraform-output.outputs.video-api-url }}
      ecs-cluster: ${{ steps.terraform-output.outputs.ecs-cluster }}
      s3-bucket: ${{ steps.terraform-output.outputs.s3-bucket }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Set Stage Environment
      run: |
        # Since we only run via workflow_run for main branch, always use prod
        echo "STAGE=prod" >> $GITHUB_ENV

    - name: Terraform Init
      run: |
        # Initialize with backend configuration
        # Clean environment variables to remove any newlines or whitespace
        CLEAN_BUCKET=$(echo "${TF_STATE_BUCKET}" | tr -d '\n\r' | xargs)
        CLEAN_TABLE=$(echo "${TF_LOCK_TABLE}" | tr -d '\n\r' | xargs)
        CLEAN_STAGE=$(echo "${STAGE}" | tr -d '\n\r' | xargs)
        
        echo "Debug: Bucket name: '$CLEAN_BUCKET'"
        echo "Debug: Table name: '$CLEAN_TABLE'"
        echo "Debug: Stage: '$CLEAN_STAGE'"
        echo "Debug: State key: '$CLEAN_STAGE/terraform.tfstate'"
        
        terraform init \
          -backend-config="bucket=$CLEAN_BUCKET" \
          -backend-config="key=$CLEAN_STAGE/terraform.tfstate" \
          -backend-config="region=${{ env.AWS_REGION }}" \
          -backend-config="dynamodb_table=$CLEAN_TABLE" \
          -backend-config="encrypt=true"
      env:
        TF_STATE_BUCKET: ${{ secrets.TF_STATE_BUCKET }}
        TF_LOCK_TABLE: ${{ secrets.TF_LOCK_TABLE }}

    - name: Terraform Plan
      run: |
        terraform plan -input=false \
          -var="jwt_access_secret=${{ secrets.JWT_ACCESS_SECRET }}" \
          -var="jwt_refresh_secret=${{ secrets.JWT_REFRESH_SECRET }}" \
          -var="video_api_image=${{ needs.build-and-push.outputs.video-image }}" \
          -var="worker_image=${{ needs.build-and-push.outputs.worker-image }}" \
          -var="aws_region=${{ env.AWS_REGION }}"

    - name: Terraform Apply
      run: |
        terraform apply -auto-approve -input=false \
          -var="jwt_access_secret=${{ secrets.JWT_ACCESS_SECRET }}" \
          -var="jwt_refresh_secret=${{ secrets.JWT_REFRESH_SECRET }}" \
          -var="video_api_image=${{ needs.build-and-push.outputs.video-image }}" \
          -var="worker_image=${{ needs.build-and-push.outputs.worker-image }}" \
          -var="aws_region=${{ env.AWS_REGION }}"

    - name: Get Terraform Outputs
      id: terraform-output
      run: |
        echo "video-api-url=$(terraform output -raw video_api_url)" >> $GITHUB_OUTPUT
        echo "ecs-cluster=$(terraform output -raw ecs_cluster_name)" >> $GITHUB_OUTPUT
        echo "s3-bucket=$(terraform output -raw videos_bucket_name)" >> $GITHUB_OUTPUT

    - name: Output Infrastructure Info
      run: |
        echo "### Infrastructure Deployment Complete ðŸš€" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Video API URL:** ${{ steps.terraform-output.outputs.video-api-url }}" >> $GITHUB_STEP_SUMMARY
        echo "**ECS Cluster:** ${{ steps.terraform-output.outputs.ecs-cluster }}" >> $GITHUB_STEP_SUMMARY
        echo "**S3 Bucket:** ${{ steps.terraform-output.outputs.s3-bucket }}" >> $GITHUB_STEP_SUMMARY
        echo "**Video API Image:** ${{ needs.build-and-push.outputs.video-image }}" >> $GITHUB_STEP_SUMMARY
        echo "**Worker Image:** ${{ needs.build-and-push.outputs.worker-image }}" >> $GITHUB_STEP_SUMMARY
