name: Deploy Services

on:
  workflow_run:
    workflows: ["Deploy Infrastructure"]
    types:
      - completed
    branches: [main]

permissions:
  contents: read
  actions: read

env:
  AWS_REGION: 'us-east-1'
  PROJECT_NAME: 'fiap-hackaton'

jobs:
  deploy-services:
    name: Deploy Services
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Download Infrastructure Outputs
      uses: actions/download-artifact@v4
      with:
        name: infrastructure-outputs
        github-token: ${{ secrets.GITHUB_TOKEN }}
        run-id: ${{ github.event.workflow_run.id }}

    - name: Load Infrastructure Outputs
      id: load-outputs
      run: |
        # Load outputs from artifact
        if [[ -f infrastructure-outputs.json ]]; then
          echo "Infrastructure outputs found:"
          cat infrastructure-outputs.json
          
          # Parse JSON and set outputs
          echo "ecr_base_uri=$(jq -r '.ecr_base_uri' infrastructure-outputs.json)" >> $GITHUB_OUTPUT
          echo "ecs_cluster_name=$(jq -r '.ecs_cluster_name' infrastructure-outputs.json)" >> $GITHUB_OUTPUT
          echo "ecs_video_service_name=$(jq -r '.ecs_video_service_name' infrastructure-outputs.json)" >> $GITHUB_OUTPUT
          echo "ecs_auth_service_name=$(jq -r '.ecs_auth_service_name' infrastructure-outputs.json)" >> $GITHUB_OUTPUT
          echo "ecs_worker_service_name=$(jq -r '.ecs_worker_service_name' infrastructure-outputs.json)" >> $GITHUB_OUTPUT
          echo "ecs_video_task_definition_arn=$(jq -r '.ecs_video_task_definition_arn' infrastructure-outputs.json)" >> $GITHUB_OUTPUT
          echo "ecs_auth_task_definition_arn=$(jq -r '.ecs_auth_task_definition_arn' infrastructure-outputs.json)" >> $GITHUB_OUTPUT
          echo "ecs_worker_task_definition_arn=$(jq -r '.ecs_worker_task_definition_arn' infrastructure-outputs.json)" >> $GITHUB_OUTPUT
        else
          echo "ERROR: Infrastructure outputs not found!"
          exit 1
        fi

  deploy-video:
    name: Deploy Video Service
    runs-on: ubuntu-latest
    needs: deploy-services
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Download Infrastructure Outputs
      uses: actions/download-artifact@v4
      with:
        name: infrastructure-outputs
        github-token: ${{ secrets.GITHUB_TOKEN }}
        run-id: ${{ github.event.workflow_run.id }}

    - name: Load Infrastructure Outputs
      id: load-outputs
      run: |
        echo "ecr_base_uri=$(jq -r '.ecr_base_uri' infrastructure-outputs.json)" >> $GITHUB_OUTPUT
        echo "ecs_cluster_name=$(jq -r '.ecs_cluster_name' infrastructure-outputs.json)" >> $GITHUB_OUTPUT
        echo "ecs_video_service_name=$(jq -r '.ecs_video_service_name' infrastructure-outputs.json)" >> $GITHUB_OUTPUT
        echo "ecs_video_task_definition_arn=$(jq -r '.ecs_video_task_definition_arn' infrastructure-outputs.json)" >> $GITHUB_OUTPUT

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to ECR
      run: |
        aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login \
          --username AWS \
          --password-stdin ${{ steps.load-outputs.outputs.ecr_base_uri }}

    - name: Create ECR repository if missing
      run: |
        REPO_NAME="${{ env.PROJECT_NAME }}-prod/video"
        if ! aws ecr describe-repositories --repository-names "$REPO_NAME" \
             --region ${{ env.AWS_REGION }} > /dev/null 2>&1; then
          aws ecr create-repository \
            --repository-name "$REPO_NAME" \
            --region ${{ env.AWS_REGION }}
          echo "Created ECR repository: $REPO_NAME"
        else
          echo "ECR repository already exists: $REPO_NAME"
        fi

    - name: Build & Push video image
      id: build-push-video
      run: |
        # Build image with commit SHA tag
        IMAGE_URI="${{ steps.load-outputs.outputs.ecr_base_uri }}/video:${{ github.sha }}"
        LATEST_URI="${{ steps.load-outputs.outputs.ecr_base_uri }}/video:latest"
        
        echo "Building image for video service"
        echo "Image URI: $IMAGE_URI"
        echo "Latest URI: $LATEST_URI"
        
        docker build \
          -t "$IMAGE_URI" \
          -t "$LATEST_URI" \
          -f apps/video/Dockerfile \
          apps/video
        
        docker push "$IMAGE_URI"
        docker push "$LATEST_URI"
        
        echo "image_uri=$IMAGE_URI" >> $GITHUB_OUTPUT
        echo "### Video Service Image Built ðŸš€" >> $GITHUB_STEP_SUMMARY
        echo "**Image URI:** $IMAGE_URI" >> $GITHUB_STEP_SUMMARY

    - name: Download current task definition
      run: |
        # Use the actual task definition ARN from Terraform
        TASK_DEF_ARN="${{ steps.load-outputs.outputs.ecs_video_task_definition_arn }}"
        echo "Downloading task definition: $TASK_DEF_ARN"
        
        aws ecs describe-task-definition \
          --task-definition "$TASK_DEF_ARN" \
          --query 'taskDefinition' \
          --output json > task-definition.json
        
        echo "Successfully downloaded task definition"
        
        # Show container info for debugging
        echo "Container definitions:"
        cat task-definition.json | jq '.containerDefinitions[] | {name: .name, image: .image}'

    - name: Update task definition with new image  
      id: update-task-def
      run: |
        # Get the current image URI we built
        NEW_IMAGE="${{ steps.load-outputs.outputs.ecr_base_uri }}/video:${{ github.sha }}"
        
        # Update the task definition with the new image
        # We'll update the first container (assuming single container per task)
        jq --arg newImage "$NEW_IMAGE" \
           '.containerDefinitions[0].image = $newImage' \
           task-definition.json > new-task-definition.json
        
        # Remove fields that shouldn't be in the registration
        jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .placementConstraints, .compatibilities, .registeredAt, .registeredBy)' \
           new-task-definition.json > final-task-definition.json
        
        echo "Updated task definition with image: $NEW_IMAGE"
        echo "task-definition=final-task-definition.json" >> $GITHUB_OUTPUT

    - name: Deploy to ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.update-task-def.outputs.task-definition }}
        service: ${{ steps.load-outputs.outputs.ecs_video_service_name }}
        cluster: ${{ steps.load-outputs.outputs.ecs_cluster_name }}
        wait-for-service-stability: true

    - name: Service deployment summary
      run: |
        echo "### Video Service Deployment Complete âœ…" >> $GITHUB_STEP_SUMMARY
        echo "**New Image:** ${{ steps.load-outputs.outputs.ecr_base_uri }}/video:${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "**Service:** ${{ steps.load-outputs.outputs.ecs_video_service_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Cluster:** ${{ steps.load-outputs.outputs.ecs_cluster_name }}" >> $GITHUB_STEP_SUMMARY

  deploy-auth:
    name: Deploy Auth Service
    runs-on: ubuntu-latest
    needs: deploy-services
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Download Infrastructure Outputs
      uses: actions/download-artifact@v4
      with:
        name: infrastructure-outputs
        github-token: ${{ secrets.GITHUB_TOKEN }}
        run-id: ${{ github.event.workflow_run.id }}

    - name: Load Infrastructure Outputs
      id: load-outputs
      run: |
        echo "ecr_base_uri=$(jq -r '.ecr_base_uri' infrastructure-outputs.json)" >> $GITHUB_OUTPUT
        echo "ecs_cluster_name=$(jq -r '.ecs_cluster_name' infrastructure-outputs.json)" >> $GITHUB_OUTPUT
        echo "ecs_auth_service_name=$(jq -r '.ecs_auth_service_name' infrastructure-outputs.json)" >> $GITHUB_OUTPUT
        echo "ecs_auth_task_definition_arn=$(jq -r '.ecs_auth_task_definition_arn' infrastructure-outputs.json)" >> $GITHUB_OUTPUT

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to ECR
      run: |
        aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login \
          --username AWS \
          --password-stdin ${{ steps.load-outputs.outputs.ecr_base_uri }}

    - name: Create ECR repository if missing
      run: |
        REPO_NAME="${{ env.PROJECT_NAME }}-prod/auth"
        if ! aws ecr describe-repositories --repository-names "$REPO_NAME" \
             --region ${{ env.AWS_REGION }} > /dev/null 2>&1; then
          aws ecr create-repository \
            --repository-name "$REPO_NAME" \
            --region ${{ env.AWS_REGION }}
          echo "Created ECR repository: $REPO_NAME"
        else
          echo "ECR repository already exists: $REPO_NAME"
        fi

    - name: Build & Push auth image
      id: build-push-auth
      run: |
        # Build image with commit SHA tag
        IMAGE_URI="${{ steps.load-outputs.outputs.ecr_base_uri }}/auth:${{ github.sha }}"
        LATEST_URI="${{ steps.load-outputs.outputs.ecr_base_uri }}/auth:latest"
        
        echo "Building image for auth service"
        echo "Image URI: $IMAGE_URI"
        echo "Latest URI: $LATEST_URI"
        
        docker build \
          -t "$IMAGE_URI" \
          -t "$LATEST_URI" \
          -f apps/user/Dockerfile \
          apps/user
        
        docker push "$IMAGE_URI"
        docker push "$LATEST_URI"
        
        echo "image_uri=$IMAGE_URI" >> $GITHUB_OUTPUT
        echo "### Auth Service Image Built ðŸš€" >> $GITHUB_STEP_SUMMARY
        echo "**Image URI:** $IMAGE_URI" >> $GITHUB_STEP_SUMMARY

    - name: Download current task definition
      run: |
        # Use the actual task definition ARN from Terraform
        TASK_DEF_ARN="${{ steps.load-outputs.outputs.ecs_auth_task_definition_arn }}"
        echo "Downloading task definition: $TASK_DEF_ARN"
        
        aws ecs describe-task-definition \
          --task-definition "$TASK_DEF_ARN" \
          --query 'taskDefinition' \
          --output json > task-definition.json
        
        echo "Successfully downloaded task definition"
        
        # Show container info for debugging
        echo "Container definitions:"
        cat task-definition.json | jq '.containerDefinitions[] | {name: .name, image: .image}'

    - name: Update task definition with new image  
      id: update-task-def
      run: |
        # Get the current image URI we built
        NEW_IMAGE="${{ steps.load-outputs.outputs.ecr_base_uri }}/auth:${{ github.sha }}"
        
        # Update the task definition with the new image
        # We'll update the first container (assuming single container per task)
        jq --arg newImage "$NEW_IMAGE" \
           '.containerDefinitions[0].image = $newImage' \
           task-definition.json > new-task-definition.json
        
        # Remove fields that shouldn't be in the registration
        jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .placementConstraints, .compatibilities, .registeredAt, .registeredBy)' \
           new-task-definition.json > final-task-definition.json
        
        echo "Updated task definition with image: $NEW_IMAGE"
        echo "task-definition=final-task-definition.json" >> $GITHUB_OUTPUT

    - name: Deploy to ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.update-task-def.outputs.task-definition }}
        service: ${{ steps.load-outputs.outputs.ecs_auth_service_name }}
        cluster: ${{ steps.load-outputs.outputs.ecs_cluster_name }}
        wait-for-service-stability: true

    - name: Service deployment summary
      run: |
        echo "### Auth Service Deployment Complete âœ…" >> $GITHUB_STEP_SUMMARY
        echo "**New Image:** ${{ steps.load-outputs.outputs.ecr_base_uri }}/auth:${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "**Service:** ${{ steps.load-outputs.outputs.ecs_auth_service_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Cluster:** ${{ steps.load-outputs.outputs.ecs_cluster_name }}" >> $GITHUB_STEP_SUMMARY

  deploy-worker:
    name: Deploy Worker Service
    runs-on: ubuntu-latest
    needs: deploy-services
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Download Infrastructure Outputs
      uses: actions/download-artifact@v4
      with:
        name: infrastructure-outputs
        github-token: ${{ secrets.GITHUB_TOKEN }}
        run-id: ${{ github.event.workflow_run.id }}

    - name: Load Infrastructure Outputs
      id: load-outputs
      run: |
        echo "ecr_base_uri=$(jq -r '.ecr_base_uri' infrastructure-outputs.json)" >> $GITHUB_OUTPUT
        echo "ecs_cluster_name=$(jq -r '.ecs_cluster_name' infrastructure-outputs.json)" >> $GITHUB_OUTPUT
        echo "ecs_worker_service_name=$(jq -r '.ecs_worker_service_name' infrastructure-outputs.json)" >> $GITHUB_OUTPUT
        echo "ecs_worker_task_definition_arn=$(jq -r '.ecs_worker_task_definition_arn' infrastructure-outputs.json)" >> $GITHUB_OUTPUT

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to ECR
      run: |
        aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login \
          --username AWS \
          --password-stdin ${{ steps.load-outputs.outputs.ecr_base_uri }}

    - name: Create ECR repository if missing
      run: |
        REPO_NAME="${{ env.PROJECT_NAME }}-prod/worker"
        if ! aws ecr describe-repositories --repository-names "$REPO_NAME" \
             --region ${{ env.AWS_REGION }} > /dev/null 2>&1; then
          aws ecr create-repository \
            --repository-name "$REPO_NAME" \
            --region ${{ env.AWS_REGION }}
          echo "Created ECR repository: $REPO_NAME"
        else
          echo "ECR repository already exists: $REPO_NAME"
        fi

    - name: Build & Push worker image
      id: build-push-worker
      run: |
        # Build image with commit SHA tag
        IMAGE_URI="${{ steps.load-outputs.outputs.ecr_base_uri }}/worker:${{ github.sha }}"
        LATEST_URI="${{ steps.load-outputs.outputs.ecr_base_uri }}/worker:latest"
        
        echo "Building image for worker service"
        echo "Image URI: $IMAGE_URI"
        echo "Latest URI: $LATEST_URI"
        
        docker build \
          -t "$IMAGE_URI" \
          -t "$LATEST_URI" \
          -f apps/worker/Dockerfile \
          apps/worker
        
        docker push "$IMAGE_URI"
        docker push "$LATEST_URI"
        
        echo "image_uri=$IMAGE_URI" >> $GITHUB_OUTPUT
        echo "### Worker Service Image Built ðŸš€" >> $GITHUB_STEP_SUMMARY
        echo "**Image URI:** $IMAGE_URI" >> $GITHUB_STEP_SUMMARY

    - name: Download current task definition
      run: |
        # Use the actual task definition ARN from Terraform
        TASK_DEF_ARN="${{ steps.load-outputs.outputs.ecs_worker_task_definition_arn }}"
        echo "Downloading task definition: $TASK_DEF_ARN"
        
        aws ecs describe-task-definition \
          --task-definition "$TASK_DEF_ARN" \
          --query 'taskDefinition' \
          --output json > task-definition.json
        
        echo "Successfully downloaded task definition"
        
        # Show container info for debugging
        echo "Container definitions:"
        cat task-definition.json | jq '.containerDefinitions[] | {name: .name, image: .image}'

    - name: Update task definition with new image  
      id: update-task-def
      run: |
        # Get the current image URI we built
        NEW_IMAGE="${{ steps.load-outputs.outputs.ecr_base_uri }}/worker:${{ github.sha }}"
        
        # Update the task definition with the new image
        # We'll update the first container (assuming single container per task)
        jq --arg newImage "$NEW_IMAGE" \
           '.containerDefinitions[0].image = $newImage' \
           task-definition.json > new-task-definition.json
        
        # Remove fields that shouldn't be in the registration
        jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .placementConstraints, .compatibilities, .registeredAt, .registeredBy)' \
           new-task-definition.json > final-task-definition.json
        
        echo "Updated task definition with image: $NEW_IMAGE"
        echo "task-definition=final-task-definition.json" >> $GITHUB_OUTPUT

    - name: Deploy to ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.update-task-def.outputs.task-definition }}
        service: ${{ steps.load-outputs.outputs.ecs_worker_service_name }}
        cluster: ${{ steps.load-outputs.outputs.ecs_cluster_name }}
        wait-for-service-stability: true

    - name: Service deployment summary
      run: |
        echo "### Worker Service Deployment Complete âœ…" >> $GITHUB_STEP_SUMMARY
        echo "**New Image:** ${{ steps.load-outputs.outputs.ecr_base_uri }}/worker:${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "**Service:** ${{ steps.load-outputs.outputs.ecs_worker_service_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Cluster:** ${{ steps.load-outputs.outputs.ecs_cluster_name }}" >> $GITHUB_STEP_SUMMARY
