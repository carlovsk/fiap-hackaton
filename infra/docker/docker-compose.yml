# FIAP Hackaton - Unified Development Environment
# This docker-compose file sets up the complete development environment
# including all three APIs and their infrastructure dependencies.

services:
  # Auth Service (Port 3000)
  auth-api:
    build:
      context: ../../apps/auth
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/usersdb
      - PORT=3000
      - JWT_ACCESS_SECRET=dev_access_secret_12345
      - JWT_REFRESH_SECRET=dev_refresh_secret_12345
      - JWT_ACCESS_EXPIRES_IN=15m
      - JWT_REFRESH_EXPIRES_IN=7d
    volumes:
      - ../../apps/auth:/app
      - /app/node_modules
    command: ["npm", "run", "dev"]
    depends_on:
      - postgres
    networks:
      - app-network

  # Video API Service (Port 3001) 
  video-api:
    build:
      context: ../../apps/video
      dockerfile: Dockerfile
    ports:
      - "3001:4000"
      - "8080:8080" # Prometheus metrics
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/videosdb
      - PORT=4000
      - MINIO_ENDPOINT=http://minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - MINIO_BUCKET=videos
      - JWT_ACCESS_SECRET=dev_access_secret_12345
      - JWT_REFRESH_SECRET=dev_refresh_secret_12345
      - AWS_REGION=us-east-1
      - RABBITMQ_URL=amqp://rabbitmq:5672
    volumes:
      - ../../apps/video:/app
      - /app/node_modules
    command: ["npm", "run", "dev"]
    depends_on:
      - postgres
      - minio
      - rabbitmq
    networks:
      - app-network

  # Worker Service (Port 3002)
  worker-api:
    build:
      context: ../../apps/worker
      dockerfile: Dockerfile
    ports:
      - "3002:3001"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/videosdb
      - RABBITMQ_URL=amqp://rabbitmq:5672
      - MINIO_ENDPOINT=http://minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - MINIO_BUCKET=videos
      - VIDEO_SERVICE_API=http://video-api:4000
    networks:
      - app-network
    volumes:
      - ../../apps/worker:/app
      - /app/node_modules
    command: ["npm", "run", "dev"]
    depends_on:
      - postgres
      - minio
      - rabbitmq

  # PostgreSQL Database (Unified for all services)
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: usersdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - app-network

  # MinIO (S3-compatible storage)
  minio:
    image: minio/minio
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio_data:/data
    networks:
      - app-network

  # RabbitMQ (Message Queue)
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"   # AMQP
      - "15672:15672" # Management UI
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - app-network

  # pgAdmin (Database Administration)
  pgadmin:
    image: dpage/pgadmin4
    ports:
      - "8081:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    depends_on:
      - postgres
    networks:
      - app-network
    volumes:
      - pgadmin_data:/var/lib/pgadmin

  # Prometheus (Metrics Collection)
  prometheus:
    image: prom/prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - app-network
    depends_on:
      - video-api

  # Grafana (Metrics Visualization)
  grafana:
    image: grafana/grafana
    ports:
      - "3003:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - app-network
    volumes:
      - grafana_data:/var/lib/grafana

# Volumes for persistent data
volumes:
  postgres_data:
    driver: local
  minio_data:
    driver: local
  rabbitmq_data:
    driver: local
  pgadmin_data:
    driver: local
  grafana_data:
    driver: local

# Network for service communication
networks:
  app-network:
    driver: bridge
